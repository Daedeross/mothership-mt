[h: macroArgs = trim(decode(replace(macro.args, "cachelib=false ;", "")))]
[h: stat = json.get(macroArgs, "stat")]
[h, if(json.contains(macroArgs, "skill")), code: {
    [h: skill = json.get(macroArgs, "skill")]
    [h: broadcast(skill)]
    [h: statText = strformat("%s+%s", stat, json.get(skill, "name"))]
    [h: bonus = json.get(skill, "bonus")]
}; {
    [g: statText = stat]
    [h: bonus = 0]
}]
[h: mode = json.get(macroArgs, "mode")]
[h: assert(mode == "" || mode == "A" || mode == "D", "mode (arg(2)) must be '', 'A', or 'D'")]
[h: output = json.get(macroArgs, "output")]
[h, if(json.contains(macroArgs, "id")): id = json.get(macroArgs, "id"); id = currentToken() ]
[h: target = getProperty(stat, id)]
[h: assert(isNumber(target), strformat("Stat '%s' not found on token.", stat))]
[h: target = number(target)]
[h: rollArgs = json.append("[]", target, mode, statText, bonus, output, id)]
[h, macro("makeRoll@this"): rollArgs]
[h: link = macroLinkText("showText@this", output, macro.return, id)]
[h: execLink(link)]